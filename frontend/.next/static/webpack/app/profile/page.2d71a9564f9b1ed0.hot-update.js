"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/profile/page",{

/***/ "(app-pages-browser)/./src/lib/firebase.ts":
/*!*****************************!*\
  !*** ./src/lib/firebase.ts ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FirebaseError: function() { return /* binding */ FirebaseError; },\n/* harmony export */   analytics: function() { return /* binding */ analytics; },\n/* harmony export */   app: function() { return /* binding */ app; },\n/* harmony export */   auth: function() { return /* binding */ auth; },\n/* harmony export */   createStoryWithStatus: function() { return /* binding */ createStoryWithStatus; },\n/* harmony export */   db: function() { return /* binding */ db; },\n/* harmony export */   getStory: function() { return /* binding */ getStory; },\n/* harmony export */   getStoryGenerationStatus: function() { return /* binding */ getStoryGenerationStatus; },\n/* harmony export */   getUserStories: function() { return /* binding */ getUserStories; },\n/* harmony export */   saveStory: function() { return /* binding */ saveStory; },\n/* harmony export */   storiesCollection: function() { return /* binding */ storiesCollection; },\n/* harmony export */   updateStory: function() { return /* binding */ updateStory; },\n/* harmony export */   updateStoryStatus: function() { return /* binding */ updateStoryStatus; }\n/* harmony export */ });\n/* harmony import */ var firebase_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/app */ \"(app-pages-browser)/./node_modules/firebase/app/dist/esm/index.esm.js\");\n/* harmony import */ var firebase_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase/auth */ \"(app-pages-browser)/./node_modules/firebase/auth/dist/esm/index.esm.js\");\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! firebase/firestore */ \"(app-pages-browser)/./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n/* harmony import */ var firebase_analytics__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! firebase/analytics */ \"(app-pages-browser)/./node_modules/firebase/analytics/dist/esm/index.esm.js\");\n/* __next_internal_client_entry_do_not_use__ storiesCollection,FirebaseError,saveStory,updateStory,getUserStories,getStory,createStoryWithStatus,updateStoryStatus,getStoryGenerationStatus,app,auth,db,analytics auto */ \n\n\n\n// Log environment variables for debugging\nconsole.log(\"Firebase Config:\", {\n    apiKey:  true ? \"Set\" : 0,\n    authDomain:  true ? \"Set\" : 0,\n    projectId:  true ? \"Set\" : 0,\n    storageBucket:  true ? \"Set\" : 0,\n    messagingSenderId:  true ? \"Set\" : 0,\n    appId:  true ? \"Set\" : 0,\n    measurementId:  true ? \"Set\" : 0\n});\nconst firebaseConfig = {\n    apiKey: \"AIzaSyAPjxc_Y70cfxyME-ao3WspK8PCeJaTR7k\",\n    authDomain: \"montajai.firebaseapp.com\",\n    projectId: \"montajai\",\n    storageBucket: \"montajai.firebasestorage.app\",\n    messagingSenderId: \"1074834137884\",\n    appId: \"1:1074834137884:web:acaa300a37b9dadc3e10d9\",\n    measurementId: \"G-HSZ6LZR8Q9\"\n};\n// Initialize Firebase\nconst app = (0,firebase_app__WEBPACK_IMPORTED_MODULE_0__.getApps)().length ? (0,firebase_app__WEBPACK_IMPORTED_MODULE_0__.getApp)() : (0,firebase_app__WEBPACK_IMPORTED_MODULE_0__.initializeApp)(firebaseConfig);\nconst auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)(app);\nconst db = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getFirestore)(app);\nlet analytics;\ntry {\n    // Initialize Analytics only in browser environment\n    if (true) {\n        analytics = (0,firebase_analytics__WEBPACK_IMPORTED_MODULE_3__.getAnalytics)(app);\n    }\n    console.log(\"Firebase initialized successfully\");\n} catch (error) {\n    console.error(\"Error initializing Firebase:\", error);\n    throw error;\n}\n// Add security rules for stories collection\nconst storiesCollection = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(db, \"stories\");\n// Custom error types for better error handling\nclass FirebaseError extends Error {\n    constructor(message, code, status = 500){\n        super(message);\n        this.code = code;\n        this.status = status;\n        this.name = \"FirebaseError\";\n    }\n}\n// Validation function for story data\nconst validateStory = (story)=>{\n    var _story_title, _story_content, _story_userId;\n    const errors = [];\n    if (!((_story_title = story.title) === null || _story_title === void 0 ? void 0 : _story_title.trim())) {\n        errors.push(\"Title is required\");\n    }\n    if (!((_story_content = story.content) === null || _story_content === void 0 ? void 0 : _story_content.trim())) {\n        errors.push(\"Content is required\");\n    }\n    if (!story.config) {\n        errors.push(\"Configuration is required\");\n    } else {\n        const { industry, companySize, role, experience, focus, tone, format, length } = story.config;\n        if (!(industry === null || industry === void 0 ? void 0 : industry.trim())) errors.push(\"Industry is required\");\n        if (!(companySize === null || companySize === void 0 ? void 0 : companySize.trim())) errors.push(\"Company size is required\");\n        if (!(role === null || role === void 0 ? void 0 : role.trim())) errors.push(\"Role is required\");\n        if (!(experience === null || experience === void 0 ? void 0 : experience.trim())) errors.push(\"Experience is required\");\n        if (!(focus === null || focus === void 0 ? void 0 : focus.trim())) errors.push(\"Focus is required\");\n        if (!(tone === null || tone === void 0 ? void 0 : tone.trim())) errors.push(\"Tone is required\");\n        if (!(format === null || format === void 0 ? void 0 : format.trim())) errors.push(\"Format is required\");\n        if (!(length === null || length === void 0 ? void 0 : length.trim())) errors.push(\"Length is required\");\n    }\n    if (!((_story_userId = story.userId) === null || _story_userId === void 0 ? void 0 : _story_userId.trim())) {\n        errors.push(\"User ID is required\");\n    }\n    if (!story.status || ![\n        \"completed\",\n        \"in_progress\",\n        \"failed\"\n    ].includes(story.status)) {\n        errors.push(\"Invalid status\");\n    }\n    if (errors.length > 0) {\n        throw new FirebaseError(errors.join(\", \"), \"INVALID_DATA\", 400);\n    }\n};\n// Function to save a story to Firestore\nconst saveStory = async (story)=>{\n    try {\n        // Ensure user is authenticated\n        const user = auth.currentUser;\n        if (!user) {\n            throw new FirebaseError(\"User must be authenticated to save stories\", \"UNAUTHENTICATED\", 401);\n        }\n        // Validate story data\n        validateStory(story);\n        // Add the story to Firestore\n        const docRef = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.addDoc)(storiesCollection, {\n            ...story,\n            userId: user.uid,\n            createdAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.serverTimestamp)()\n        });\n        return docRef.id;\n    } catch (error) {\n        if (error instanceof FirebaseError) {\n            throw error;\n        }\n        console.error(\"Error saving story:\", error);\n        throw new FirebaseError(\"Failed to save story\", \"SAVE_ERROR\", error instanceof Error && \"code\" in error ? 500 : 500);\n    }\n};\n// Function to update a story\nconst updateStory = async (storyId, updates)=>{\n    try {\n        const user = auth.currentUser;\n        if (!user) {\n            throw new FirebaseError(\"User must be authenticated to update stories\", \"UNAUTHENTICATED\", 401);\n        }\n        // Get the existing story to verify ownership\n        const storyRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.doc)(db, \"stories\", storyId);\n        const storySnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDoc)(storyRef);\n        if (!storySnap.exists()) {\n            throw new FirebaseError(\"Story not found\", \"NOT_FOUND\", 404);\n        }\n        const storyData = storySnap.data();\n        if (storyData.userId !== user.uid) {\n            throw new FirebaseError(\"Unauthorized to update this story\", \"UNAUTHORIZED\", 403);\n        }\n        // Validate the updated data\n        const updatedStory = {\n            ...storyData,\n            ...updates\n        };\n        validateStory(updatedStory);\n        // Update the story\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.updateDoc)(storyRef, {\n            ...updates,\n            updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.serverTimestamp)()\n        });\n        return storyId;\n    } catch (error) {\n        if (error instanceof FirebaseError) {\n            throw error;\n        }\n        console.error(\"Error updating story:\", error);\n        throw new FirebaseError(\"Failed to update story\", \"UPDATE_ERROR\", error instanceof Error && \"code\" in error ? 500 : 500);\n    }\n};\n// Function to get stories for the current user\nconst getUserStories = async ()=>{\n    try {\n        const user = auth.currentUser;\n        if (!user) {\n            throw new FirebaseError(\"User must be authenticated to fetch stories\", \"UNAUTHENTICATED\", 401);\n        }\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.query)(storiesCollection, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.where)(\"userId\", \"==\", user.uid), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.orderBy)(\"createdAt\", \"desc\"));\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDocs)(q);\n        return querySnapshot.docs.map((doc)=>({\n                id: doc.id,\n                ...doc.data()\n            }));\n    } catch (error) {\n        if (error instanceof FirebaseError) {\n            throw error;\n        }\n        console.error(\"Error fetching stories:\", error);\n        throw new FirebaseError(\"Failed to fetch stories\", \"FETCH_ERROR\", error instanceof Error && \"code\" in error ? 500 : 500);\n    }\n};\n// Function to get a single story\nconst getStory = async (storyId)=>{\n    try {\n        const user = auth.currentUser;\n        if (!user) {\n            throw new FirebaseError(\"User must be authenticated to get stories\", \"UNAUTHENTICATED\", 401);\n        }\n        const docRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.doc)(db, \"stories\", storyId);\n        const docSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDoc)(docRef);\n        if (!docSnap.exists()) {\n            throw new FirebaseError(\"Story not found\", \"NOT_FOUND\", 404);\n        }\n        const storyData = docSnap.data();\n        if (storyData.userId !== user.uid) {\n            throw new FirebaseError(\"Unauthorized to access this story\", \"UNAUTHORIZED\", 403);\n        }\n        return {\n            id: docSnap.id,\n            ...storyData\n        };\n    } catch (error) {\n        if (error instanceof FirebaseError) {\n            throw error;\n        }\n        console.error(\"Error getting story:\", error);\n        throw new FirebaseError(\"Failed to get story\", \"FETCH_ERROR\", error instanceof Error && \"code\" in error ? 500 : 500);\n    }\n};\n// Function to create a story with initial status and error tracking\nconst createStoryWithStatus = async function(story) {\n    let status = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"in_progress\", error = arguments.length > 2 ? arguments[2] : void 0;\n    try {\n        const user = auth.currentUser;\n        if (!user) {\n            throw new FirebaseError(\"User must be authenticated to create stories\", \"UNAUTHENTICATED\", 401);\n        }\n        // Create initial story document with error tracking\n        const docRef = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.addDoc)(storiesCollection, {\n            ...story,\n            userId: user.uid,\n            status,\n            createdAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.serverTimestamp)(),\n            error: error ? {\n                ...error,\n                timestamp: new Date().toISOString()\n            } : null,\n            generationAttempts: 0,\n            lastAttemptAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.serverTimestamp)()\n        });\n        return docRef.id;\n    } catch (error) {\n        if (error instanceof FirebaseError) {\n            throw error;\n        }\n        console.error(\"Error creating story:\", error);\n        throw new FirebaseError(\"Failed to create story\", \"CREATE_ERROR\", error instanceof Error && \"code\" in error ? 500 : 500);\n    }\n};\n// Function to update story generation status with detailed error tracking\nconst updateStoryStatus = async (storyId, status, error)=>{\n    try {\n        const user = auth.currentUser;\n        if (!user) {\n            throw new FirebaseError(\"User must be authenticated to update story status\", \"UNAUTHENTICATED\", 401);\n        }\n        const storyRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.doc)(db, \"stories\", storyId);\n        const storySnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDoc)(storyRef);\n        if (!storySnap.exists()) {\n            throw new FirebaseError(\"Story not found\", \"NOT_FOUND\", 404);\n        }\n        const storyData = storySnap.data();\n        if (storyData.userId !== user.uid) {\n            throw new FirebaseError(\"Unauthorized to update this story\", \"UNAUTHORIZED\", 403);\n        }\n        const updates = {\n            status,\n            updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.serverTimestamp)(),\n            lastAttemptAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.serverTimestamp)()\n        };\n        if (error) {\n            updates.error = {\n                ...error,\n                timestamp: new Date().toISOString()\n            };\n            updates.generationAttempts = (storyData.generationAttempts || 0) + 1;\n        }\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.updateDoc)(storyRef, updates);\n        return storyId;\n    } catch (error) {\n        if (error instanceof FirebaseError) {\n            throw error;\n        }\n        console.error(\"Error updating story status:\", error);\n        throw new FirebaseError(\"Failed to update story status\", \"UPDATE_ERROR\", error instanceof Error && \"code\" in error ? 500 : 500);\n    }\n};\n// Function to get story generation status\nconst getStoryGenerationStatus = async (storyId)=>{\n    try {\n        const user = auth.currentUser;\n        if (!user) {\n            throw new FirebaseError(\"User must be authenticated to get story status\", \"UNAUTHENTICATED\", 401);\n        }\n        const docRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.doc)(db, \"stories\", storyId);\n        const docSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDoc)(docRef);\n        if (!docSnap.exists()) {\n            throw new FirebaseError(\"Story not found\", \"NOT_FOUND\", 404);\n        }\n        const storyData = docSnap.data();\n        if (storyData.userId !== user.uid) {\n            throw new FirebaseError(\"Unauthorized to access this story\", \"UNAUTHORIZED\", 403);\n        }\n        return {\n            status: storyData.status,\n            error: storyData.error,\n            generationAttempts: storyData.generationAttempts || 0,\n            lastAttemptAt: storyData.lastAttemptAt\n        };\n    } catch (error) {\n        if (error instanceof FirebaseError) {\n            throw error;\n        }\n        console.error(\"Error getting story status:\", error);\n        throw new FirebaseError(\"Failed to get story status\", \"FETCH_ERROR\", error instanceof Error && \"code\" in error ? 500 : 500);\n    }\n};\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFJRSxjQUNSLGlDQUNBLGdCQUNBRixpQkFBaUJHLFNBQVMsVUFBVUgsUUFBUSxNQUFNO0lBRXREO0FBQ0YsRUFBRTtBQUVGLDBDQUEwQztBQUNuQyxNQUFNMEQsMkJBQTJCLE9BQU92QjtJQUM3QyxJQUFJO1FBQ0YsTUFBTVAsT0FBTy9CLEtBQUtnQyxXQUFXO1FBQzdCLElBQUksQ0FBQ0QsTUFBTTtZQUNULE1BQU0sSUFBSTFCLGNBQWMsa0RBQWtELG1CQUFtQjtRQUMvRjtRQUVBLE1BQU00QixTQUFTMUQsdURBQUdBLENBQUMwQixJQUFJLFdBQVdxQztRQUNsQyxNQUFNZSxVQUFVLE1BQU03RSwwREFBTUEsQ0FBQ3lEO1FBRTdCLElBQUksQ0FBQ29CLFFBQVFYLE1BQU0sSUFBSTtZQUNyQixNQUFNLElBQUlyQyxjQUFjLG1CQUFtQixhQUFhO1FBQzFEO1FBRUEsTUFBTXNDLFlBQVlVLFFBQVFULElBQUk7UUFDOUIsSUFBSUQsVUFBVWhCLE1BQU0sS0FBS0ksS0FBS0csR0FBRyxFQUFFO1lBQ2pDLE1BQU0sSUFBSTdCLGNBQWMscUNBQXFDLGdCQUFnQjtRQUMvRTtRQUVBLE9BQU87WUFDTEssUUFBUWlDLFVBQVVqQyxNQUFNO1lBQ3hCUCxPQUFPd0MsVUFBVXhDLEtBQUs7WUFDdEJ1RCxvQkFBb0JmLFVBQVVlLGtCQUFrQixJQUFJO1lBQ3BEQyxlQUFlaEIsVUFBVWdCLGFBQWE7UUFDeEM7SUFDRixFQUFFLE9BQU94RCxPQUFPO1FBQ2QsSUFBSUEsaUJBQWlCRSxlQUFlO1lBQ2xDLE1BQU1GO1FBQ1I7UUFDQXhCLFFBQVF3QixLQUFLLENBQUMsK0JBQStCQTtRQUM3QyxNQUFNLElBQUlFLGNBQ1IsOEJBQ0EsZUFDQUYsaUJBQWlCRyxTQUFTLFVBQVVILFFBQVEsTUFBTTtJQUV0RDtBQUNGLEVBQUU7QUFFa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2xpYi9maXJlYmFzZS50cz8xNTQwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50JztcblxuaW1wb3J0IHsgaW5pdGlhbGl6ZUFwcCwgZ2V0QXBwcywgZ2V0QXBwIH0gZnJvbSAnZmlyZWJhc2UvYXBwJztcbmltcG9ydCB7IGdldEF1dGggfSBmcm9tICdmaXJlYmFzZS9hdXRoJztcbmltcG9ydCB7IGdldEZpcmVzdG9yZSwgY29sbGVjdGlvbiwgYWRkRG9jLCBzZXJ2ZXJUaW1lc3RhbXAsIHF1ZXJ5LCB3aGVyZSwgb3JkZXJCeSwgZ2V0RG9jcywgZG9jLCBnZXREb2MsIHVwZGF0ZURvYyB9IGZyb20gJ2ZpcmViYXNlL2ZpcmVzdG9yZSc7XG5pbXBvcnQgeyBnZXRBbmFseXRpY3MgfSBmcm9tICdmaXJlYmFzZS9hbmFseXRpY3MnO1xuXG4vLyBMb2cgZW52aXJvbm1lbnQgdmFyaWFibGVzIGZvciBkZWJ1Z2dpbmdcbmNvbnNvbGUubG9nKCdGaXJlYmFzZSBDb25maWc6Jywge1xuICBhcGlLZXk6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0ZJUkVCQVNFX0FQSV9LRVkgPyAnU2V0JyA6ICdOb3QgU2V0JyxcbiAgYXV0aERvbWFpbjogcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfRklSRUJBU0VfQVVUSF9ET01BSU4gPyAnU2V0JyA6ICdOb3QgU2V0JyxcbiAgcHJvamVjdElkOiBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19GSVJFQkFTRV9QUk9KRUNUX0lEID8gJ1NldCcgOiAnTm90IFNldCcsXG4gIHN0b3JhZ2VCdWNrZXQ6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0ZJUkVCQVNFX1NUT1JBR0VfQlVDS0VUID8gJ1NldCcgOiAnTm90IFNldCcsXG4gIG1lc3NhZ2luZ1NlbmRlcklkOiBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19GSVJFQkFTRV9NRVNTQUdJTkdfU0VOREVSX0lEID8gJ1NldCcgOiAnTm90IFNldCcsXG4gIGFwcElkOiBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19GSVJFQkFTRV9BUFBfSUQgPyAnU2V0JyA6ICdOb3QgU2V0JyxcbiAgbWVhc3VyZW1lbnRJZDogcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfRklSRUJBU0VfTUVBU1VSRU1FTlRfSUQgPyAnU2V0JyA6ICdOb3QgU2V0J1xufSk7XG5cbmNvbnN0IGZpcmViYXNlQ29uZmlnID0ge1xuICBhcGlLZXk6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0ZJUkVCQVNFX0FQSV9LRVksXG4gIGF1dGhEb21haW46IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0ZJUkVCQVNFX0FVVEhfRE9NQUlOLFxuICBwcm9qZWN0SWQ6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0ZJUkVCQVNFX1BST0pFQ1RfSUQsXG4gIHN0b3JhZ2VCdWNrZXQ6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0ZJUkVCQVNFX1NUT1JBR0VfQlVDS0VULFxuICBtZXNzYWdpbmdTZW5kZXJJZDogcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfRklSRUJBU0VfTUVTU0FHSU5HX1NFTkRFUl9JRCxcbiAgYXBwSWQ6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0ZJUkVCQVNFX0FQUF9JRCxcbiAgbWVhc3VyZW1lbnRJZDogcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfRklSRUJBU0VfTUVBU1VSRU1FTlRfSURcbn07XG5cbi8vIEluaXRpYWxpemUgRmlyZWJhc2VcbmNvbnN0IGFwcCA9IGdldEFwcHMoKS5sZW5ndGggPyBnZXRBcHAoKSA6IGluaXRpYWxpemVBcHAoZmlyZWJhc2VDb25maWcpO1xuY29uc3QgYXV0aCA9IGdldEF1dGgoYXBwKTtcbmNvbnN0IGRiID0gZ2V0RmlyZXN0b3JlKGFwcCk7XG5cbmxldCBhbmFseXRpY3M7XG5cbnRyeSB7XG4gIC8vIEluaXRpYWxpemUgQW5hbHl0aWNzIG9ubHkgaW4gYnJvd3NlciBlbnZpcm9ubWVudFxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBhbmFseXRpY3MgPSBnZXRBbmFseXRpY3MoYXBwKTtcbiAgfVxuICBjb25zb2xlLmxvZygnRmlyZWJhc2UgaW5pdGlhbGl6ZWQgc3VjY2Vzc2Z1bGx5Jyk7XG59IGNhdGNoIChlcnJvcikge1xuICBjb25zb2xlLmVycm9yKCdFcnJvciBpbml0aWFsaXppbmcgRmlyZWJhc2U6JywgZXJyb3IpO1xuICB0aHJvdyBlcnJvcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTdG9yeUNvbmZpZyB7XG4gIGluZHVzdHJ5OiBzdHJpbmc7XG4gIGNvbXBhbnlTaXplOiBzdHJpbmc7XG4gIHJvbGU6IHN0cmluZztcbiAgZXhwZXJpZW5jZTogc3RyaW5nO1xuICBmb2N1czogc3RyaW5nO1xuICB0b25lOiBzdHJpbmc7XG4gIGZvcm1hdDogc3RyaW5nO1xuICBsZW5ndGg6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTdG9yeSB7XG4gIGlkPzogc3RyaW5nO1xuICB0aXRsZTogc3RyaW5nO1xuICBjb250ZW50OiBzdHJpbmc7XG4gIGNvbmZpZzogU3RvcnlDb25maWc7XG4gIHVzZXJJZDogc3RyaW5nO1xuICBzdGF0dXM6ICdjb21wbGV0ZWQnIHwgJ2luX3Byb2dyZXNzJyB8ICdmYWlsZWQnO1xuICBjcmVhdGVkQXQ6IGFueTtcbiAgZXJyb3I/OiBTdG9yeUdlbmVyYXRpb25FcnJvcjtcbiAgZ2VuZXJhdGlvbkF0dGVtcHRzPzogbnVtYmVyO1xuICBsYXN0QXR0ZW1wdEF0PzogYW55O1xufVxuXG4vLyBBZGQgc2VjdXJpdHkgcnVsZXMgZm9yIHN0b3JpZXMgY29sbGVjdGlvblxuZXhwb3J0IGNvbnN0IHN0b3JpZXNDb2xsZWN0aW9uID0gY29sbGVjdGlvbihkYiwgJ3N0b3JpZXMnKTtcblxuLy8gQ3VzdG9tIGVycm9yIHR5cGVzIGZvciBiZXR0ZXIgZXJyb3IgaGFuZGxpbmdcbmV4cG9ydCBjbGFzcyBGaXJlYmFzZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihcbiAgICBtZXNzYWdlOiBzdHJpbmcsXG4gICAgcHVibGljIGNvZGU6IHN0cmluZyxcbiAgICBwdWJsaWMgc3RhdHVzOiBudW1iZXIgPSA1MDBcbiAgKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5uYW1lID0gJ0ZpcmViYXNlRXJyb3InO1xuICB9XG59XG5cbi8vIFZhbGlkYXRpb24gZnVuY3Rpb24gZm9yIHN0b3J5IGRhdGFcbmNvbnN0IHZhbGlkYXRlU3RvcnkgPSAoc3Rvcnk6IE9taXQ8U3RvcnksICdpZCcgfCAnY3JlYXRlZEF0Jz4pID0+IHtcbiAgY29uc3QgZXJyb3JzOiBzdHJpbmdbXSA9IFtdO1xuXG4gIGlmICghc3RvcnkudGl0bGU/LnRyaW0oKSkge1xuICAgIGVycm9ycy5wdXNoKCdUaXRsZSBpcyByZXF1aXJlZCcpO1xuICB9XG5cbiAgaWYgKCFzdG9yeS5jb250ZW50Py50cmltKCkpIHtcbiAgICBlcnJvcnMucHVzaCgnQ29udGVudCBpcyByZXF1aXJlZCcpO1xuICB9XG5cbiAgaWYgKCFzdG9yeS5jb25maWcpIHtcbiAgICBlcnJvcnMucHVzaCgnQ29uZmlndXJhdGlvbiBpcyByZXF1aXJlZCcpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHsgaW5kdXN0cnksIGNvbXBhbnlTaXplLCByb2xlLCBleHBlcmllbmNlLCBmb2N1cywgdG9uZSwgZm9ybWF0LCBsZW5ndGggfSA9IHN0b3J5LmNvbmZpZztcbiAgICBpZiAoIWluZHVzdHJ5Py50cmltKCkpIGVycm9ycy5wdXNoKCdJbmR1c3RyeSBpcyByZXF1aXJlZCcpO1xuICAgIGlmICghY29tcGFueVNpemU/LnRyaW0oKSkgZXJyb3JzLnB1c2goJ0NvbXBhbnkgc2l6ZSBpcyByZXF1aXJlZCcpO1xuICAgIGlmICghcm9sZT8udHJpbSgpKSBlcnJvcnMucHVzaCgnUm9sZSBpcyByZXF1aXJlZCcpO1xuICAgIGlmICghZXhwZXJpZW5jZT8udHJpbSgpKSBlcnJvcnMucHVzaCgnRXhwZXJpZW5jZSBpcyByZXF1aXJlZCcpO1xuICAgIGlmICghZm9jdXM/LnRyaW0oKSkgZXJyb3JzLnB1c2goJ0ZvY3VzIGlzIHJlcXVpcmVkJyk7XG4gICAgaWYgKCF0b25lPy50cmltKCkpIGVycm9ycy5wdXNoKCdUb25lIGlzIHJlcXVpcmVkJyk7XG4gICAgaWYgKCFmb3JtYXQ/LnRyaW0oKSkgZXJyb3JzLnB1c2goJ0Zvcm1hdCBpcyByZXF1aXJlZCcpO1xuICAgIGlmICghbGVuZ3RoPy50cmltKCkpIGVycm9ycy5wdXNoKCdMZW5ndGggaXMgcmVxdWlyZWQnKTtcbiAgfVxuXG4gIGlmICghc3RvcnkudXNlcklkPy50cmltKCkpIHtcbiAgICBlcnJvcnMucHVzaCgnVXNlciBJRCBpcyByZXF1aXJlZCcpO1xuICB9XG5cbiAgaWYgKCFzdG9yeS5zdGF0dXMgfHwgIVsnY29tcGxldGVkJywgJ2luX3Byb2dyZXNzJywgJ2ZhaWxlZCddLmluY2x1ZGVzKHN0b3J5LnN0YXR1cykpIHtcbiAgICBlcnJvcnMucHVzaCgnSW52YWxpZCBzdGF0dXMnKTtcbiAgfVxuXG4gIGlmIChlcnJvcnMubGVuZ3RoID4gMCkge1xuICAgIHRocm93IG5ldyBGaXJlYmFzZUVycm9yKGVycm9ycy5qb2luKCcsICcpLCAnSU5WQUxJRF9EQVRBJywgNDAwKTtcbiAgfVxufTtcblxuLy8gRnVuY3Rpb24gdG8gc2F2ZSBhIHN0b3J5IHRvIEZpcmVzdG9yZVxuZXhwb3J0IGNvbnN0IHNhdmVTdG9yeSA9IGFzeW5jIChzdG9yeTogT21pdDxTdG9yeSwgJ2lkJyB8ICdjcmVhdGVkQXQnPikgPT4ge1xuICB0cnkge1xuICAgIC8vIEVuc3VyZSB1c2VyIGlzIGF1dGhlbnRpY2F0ZWRcbiAgICBjb25zdCB1c2VyID0gYXV0aC5jdXJyZW50VXNlcjtcbiAgICBpZiAoIXVzZXIpIHtcbiAgICAgIHRocm93IG5ldyBGaXJlYmFzZUVycm9yKCdVc2VyIG11c3QgYmUgYXV0aGVudGljYXRlZCB0byBzYXZlIHN0b3JpZXMnLCAnVU5BVVRIRU5USUNBVEVEJywgNDAxKTtcbiAgICB9XG5cbiAgICAvLyBWYWxpZGF0ZSBzdG9yeSBkYXRhXG4gICAgdmFsaWRhdGVTdG9yeShzdG9yeSk7XG5cbiAgICAvLyBBZGQgdGhlIHN0b3J5IHRvIEZpcmVzdG9yZVxuICAgIGNvbnN0IGRvY1JlZiA9IGF3YWl0IGFkZERvYyhzdG9yaWVzQ29sbGVjdGlvbiwge1xuICAgICAgLi4uc3RvcnksXG4gICAgICB1c2VySWQ6IHVzZXIudWlkLFxuICAgICAgY3JlYXRlZEF0OiBzZXJ2ZXJUaW1lc3RhbXAoKSxcbiAgICB9KTtcblxuICAgIHJldHVybiBkb2NSZWYuaWQ7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRmlyZWJhc2VFcnJvcikge1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHNhdmluZyBzdG9yeTonLCBlcnJvcik7XG4gICAgdGhyb3cgbmV3IEZpcmViYXNlRXJyb3IoXG4gICAgICAnRmFpbGVkIHRvIHNhdmUgc3RvcnknLFxuICAgICAgJ1NBVkVfRVJST1InLFxuICAgICAgZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiAnY29kZScgaW4gZXJyb3IgPyA1MDAgOiA1MDBcbiAgICApO1xuICB9XG59O1xuXG4vLyBGdW5jdGlvbiB0byB1cGRhdGUgYSBzdG9yeVxuZXhwb3J0IGNvbnN0IHVwZGF0ZVN0b3J5ID0gYXN5bmMgKHN0b3J5SWQ6IHN0cmluZywgdXBkYXRlczogUGFydGlhbDxPbWl0PFN0b3J5LCAnaWQnIHwgJ2NyZWF0ZWRBdCcgfCAndXNlcklkJz4+KSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgdXNlciA9IGF1dGguY3VycmVudFVzZXI7XG4gICAgaWYgKCF1c2VyKSB7XG4gICAgICB0aHJvdyBuZXcgRmlyZWJhc2VFcnJvcignVXNlciBtdXN0IGJlIGF1dGhlbnRpY2F0ZWQgdG8gdXBkYXRlIHN0b3JpZXMnLCAnVU5BVVRIRU5USUNBVEVEJywgNDAxKTtcbiAgICB9XG5cbiAgICAvLyBHZXQgdGhlIGV4aXN0aW5nIHN0b3J5IHRvIHZlcmlmeSBvd25lcnNoaXBcbiAgICBjb25zdCBzdG9yeVJlZiA9IGRvYyhkYiwgJ3N0b3JpZXMnLCBzdG9yeUlkKTtcbiAgICBjb25zdCBzdG9yeVNuYXAgPSBhd2FpdCBnZXREb2Moc3RvcnlSZWYpO1xuXG4gICAgaWYgKCFzdG9yeVNuYXAuZXhpc3RzKCkpIHtcbiAgICAgIHRocm93IG5ldyBGaXJlYmFzZUVycm9yKCdTdG9yeSBub3QgZm91bmQnLCAnTk9UX0ZPVU5EJywgNDA0KTtcbiAgICB9XG5cbiAgICBjb25zdCBzdG9yeURhdGEgPSBzdG9yeVNuYXAuZGF0YSgpIGFzIFN0b3J5O1xuICAgIGlmIChzdG9yeURhdGEudXNlcklkICE9PSB1c2VyLnVpZCkge1xuICAgICAgdGhyb3cgbmV3IEZpcmViYXNlRXJyb3IoJ1VuYXV0aG9yaXplZCB0byB1cGRhdGUgdGhpcyBzdG9yeScsICdVTkFVVEhPUklaRUQnLCA0MDMpO1xuICAgIH1cblxuICAgIC8vIFZhbGlkYXRlIHRoZSB1cGRhdGVkIGRhdGFcbiAgICBjb25zdCB1cGRhdGVkU3RvcnkgPSB7IC4uLnN0b3J5RGF0YSwgLi4udXBkYXRlcyB9O1xuICAgIHZhbGlkYXRlU3RvcnkodXBkYXRlZFN0b3J5KTtcblxuICAgIC8vIFVwZGF0ZSB0aGUgc3RvcnlcbiAgICBhd2FpdCB1cGRhdGVEb2Moc3RvcnlSZWYsIHtcbiAgICAgIC4uLnVwZGF0ZXMsXG4gICAgICB1cGRhdGVkQXQ6IHNlcnZlclRpbWVzdGFtcCgpLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHN0b3J5SWQ7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRmlyZWJhc2VFcnJvcikge1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHVwZGF0aW5nIHN0b3J5OicsIGVycm9yKTtcbiAgICB0aHJvdyBuZXcgRmlyZWJhc2VFcnJvcihcbiAgICAgICdGYWlsZWQgdG8gdXBkYXRlIHN0b3J5JyxcbiAgICAgICdVUERBVEVfRVJST1InLFxuICAgICAgZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiAnY29kZScgaW4gZXJyb3IgPyA1MDAgOiA1MDBcbiAgICApO1xuICB9XG59O1xuXG4vLyBGdW5jdGlvbiB0byBnZXQgc3RvcmllcyBmb3IgdGhlIGN1cnJlbnQgdXNlclxuZXhwb3J0IGNvbnN0IGdldFVzZXJTdG9yaWVzID0gYXN5bmMgKCkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHVzZXIgPSBhdXRoLmN1cnJlbnRVc2VyO1xuICAgIGlmICghdXNlcikge1xuICAgICAgdGhyb3cgbmV3IEZpcmViYXNlRXJyb3IoJ1VzZXIgbXVzdCBiZSBhdXRoZW50aWNhdGVkIHRvIGZldGNoIHN0b3JpZXMnLCAnVU5BVVRIRU5USUNBVEVEJywgNDAxKTtcbiAgICB9XG5cbiAgICBjb25zdCBxID0gcXVlcnkoXG4gICAgICBzdG9yaWVzQ29sbGVjdGlvbixcbiAgICAgIHdoZXJlKCd1c2VySWQnLCAnPT0nLCB1c2VyLnVpZCksXG4gICAgICBvcmRlckJ5KCdjcmVhdGVkQXQnLCAnZGVzYycpXG4gICAgKTtcblxuICAgIGNvbnN0IHF1ZXJ5U25hcHNob3QgPSBhd2FpdCBnZXREb2NzKHEpO1xuICAgIHJldHVybiBxdWVyeVNuYXBzaG90LmRvY3MubWFwKGRvYyA9PiAoe1xuICAgICAgaWQ6IGRvYy5pZCxcbiAgICAgIC4uLmRvYy5kYXRhKClcbiAgICB9KSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRmlyZWJhc2VFcnJvcikge1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIHN0b3JpZXM6JywgZXJyb3IpO1xuICAgIHRocm93IG5ldyBGaXJlYmFzZUVycm9yKFxuICAgICAgJ0ZhaWxlZCB0byBmZXRjaCBzdG9yaWVzJyxcbiAgICAgICdGRVRDSF9FUlJPUicsXG4gICAgICBlcnJvciBpbnN0YW5jZW9mIEVycm9yICYmICdjb2RlJyBpbiBlcnJvciA/IDUwMCA6IDUwMFxuICAgICk7XG4gIH1cbn07XG5cbi8vIEZ1bmN0aW9uIHRvIGdldCBhIHNpbmdsZSBzdG9yeVxuZXhwb3J0IGNvbnN0IGdldFN0b3J5ID0gYXN5bmMgKHN0b3J5SWQ6IHN0cmluZykgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHVzZXIgPSBhdXRoLmN1cnJlbnRVc2VyO1xuICAgIGlmICghdXNlcikge1xuICAgICAgdGhyb3cgbmV3IEZpcmViYXNlRXJyb3IoJ1VzZXIgbXVzdCBiZSBhdXRoZW50aWNhdGVkIHRvIGdldCBzdG9yaWVzJywgJ1VOQVVUSEVOVElDQVRFRCcsIDQwMSk7XG4gICAgfVxuXG4gICAgY29uc3QgZG9jUmVmID0gZG9jKGRiLCAnc3RvcmllcycsIHN0b3J5SWQpO1xuICAgIGNvbnN0IGRvY1NuYXAgPSBhd2FpdCBnZXREb2MoZG9jUmVmKTtcblxuICAgIGlmICghZG9jU25hcC5leGlzdHMoKSkge1xuICAgICAgdGhyb3cgbmV3IEZpcmViYXNlRXJyb3IoJ1N0b3J5IG5vdCBmb3VuZCcsICdOT1RfRk9VTkQnLCA0MDQpO1xuICAgIH1cblxuICAgIGNvbnN0IHN0b3J5RGF0YSA9IGRvY1NuYXAuZGF0YSgpIGFzIFN0b3J5O1xuICAgIGlmIChzdG9yeURhdGEudXNlcklkICE9PSB1c2VyLnVpZCkge1xuICAgICAgdGhyb3cgbmV3IEZpcmViYXNlRXJyb3IoJ1VuYXV0aG9yaXplZCB0byBhY2Nlc3MgdGhpcyBzdG9yeScsICdVTkFVVEhPUklaRUQnLCA0MDMpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBpZDogZG9jU25hcC5pZCxcbiAgICAgIC4uLnN0b3J5RGF0YVxuICAgIH07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRmlyZWJhc2VFcnJvcikge1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGdldHRpbmcgc3Rvcnk6JywgZXJyb3IpO1xuICAgIHRocm93IG5ldyBGaXJlYmFzZUVycm9yKFxuICAgICAgJ0ZhaWxlZCB0byBnZXQgc3RvcnknLFxuICAgICAgJ0ZFVENIX0VSUk9SJyxcbiAgICAgIGVycm9yIGluc3RhbmNlb2YgRXJyb3IgJiYgJ2NvZGUnIGluIGVycm9yID8gNTAwIDogNTAwXG4gICAgKTtcbiAgfVxufTtcblxuLy8gQWRkIG5ldyBlcnJvciB0eXBlcyBmb3Igc3RvcnkgZ2VuZXJhdGlvblxuZXhwb3J0IGludGVyZmFjZSBTdG9yeUdlbmVyYXRpb25FcnJvciB7XG4gIGNvZGU6IHN0cmluZztcbiAgbWVzc2FnZTogc3RyaW5nO1xuICBkZXRhaWxzPzogYW55O1xuICB0aW1lc3RhbXA6IERhdGU7XG4gIHJldHJ5Q291bnQ/OiBudW1iZXI7XG59XG5cbi8vIEZ1bmN0aW9uIHRvIGNyZWF0ZSBhIHN0b3J5IHdpdGggaW5pdGlhbCBzdGF0dXMgYW5kIGVycm9yIHRyYWNraW5nXG5leHBvcnQgY29uc3QgY3JlYXRlU3RvcnlXaXRoU3RhdHVzID0gYXN5bmMgKFxuICBzdG9yeTogT21pdDxTdG9yeSwgJ2lkJyB8ICdjcmVhdGVkQXQnIHwgJ3N0YXR1cyc+LFxuICBzdGF0dXM6ICdpbl9wcm9ncmVzcycgfCAnZmFpbGVkJyA9ICdpbl9wcm9ncmVzcycsXG4gIGVycm9yPzogU3RvcnlHZW5lcmF0aW9uRXJyb3JcbikgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHVzZXIgPSBhdXRoLmN1cnJlbnRVc2VyO1xuICAgIGlmICghdXNlcikge1xuICAgICAgdGhyb3cgbmV3IEZpcmViYXNlRXJyb3IoJ1VzZXIgbXVzdCBiZSBhdXRoZW50aWNhdGVkIHRvIGNyZWF0ZSBzdG9yaWVzJywgJ1VOQVVUSEVOVElDQVRFRCcsIDQwMSk7XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIGluaXRpYWwgc3RvcnkgZG9jdW1lbnQgd2l0aCBlcnJvciB0cmFja2luZ1xuICAgIGNvbnN0IGRvY1JlZiA9IGF3YWl0IGFkZERvYyhzdG9yaWVzQ29sbGVjdGlvbiwge1xuICAgICAgLi4uc3RvcnksXG4gICAgICB1c2VySWQ6IHVzZXIudWlkLFxuICAgICAgc3RhdHVzLFxuICAgICAgY3JlYXRlZEF0OiBzZXJ2ZXJUaW1lc3RhbXAoKSxcbiAgICAgIGVycm9yOiBlcnJvciA/IHtcbiAgICAgICAgLi4uZXJyb3IsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICB9IDogbnVsbCxcbiAgICAgIGdlbmVyYXRpb25BdHRlbXB0czogMCxcbiAgICAgIGxhc3RBdHRlbXB0QXQ6IHNlcnZlclRpbWVzdGFtcCgpXG4gICAgfSk7XG5cbiAgICByZXR1cm4gZG9jUmVmLmlkO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEZpcmViYXNlRXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjcmVhdGluZyBzdG9yeTonLCBlcnJvcik7XG4gICAgdGhyb3cgbmV3IEZpcmViYXNlRXJyb3IoXG4gICAgICAnRmFpbGVkIHRvIGNyZWF0ZSBzdG9yeScsXG4gICAgICAnQ1JFQVRFX0VSUk9SJyxcbiAgICAgIGVycm9yIGluc3RhbmNlb2YgRXJyb3IgJiYgJ2NvZGUnIGluIGVycm9yID8gNTAwIDogNTAwXG4gICAgKTtcbiAgfVxufTtcblxuLy8gRnVuY3Rpb24gdG8gdXBkYXRlIHN0b3J5IGdlbmVyYXRpb24gc3RhdHVzIHdpdGggZGV0YWlsZWQgZXJyb3IgdHJhY2tpbmdcbmV4cG9ydCBjb25zdCB1cGRhdGVTdG9yeVN0YXR1cyA9IGFzeW5jIChcbiAgc3RvcnlJZDogc3RyaW5nLFxuICBzdGF0dXM6ICdjb21wbGV0ZWQnIHwgJ2luX3Byb2dyZXNzJyB8ICdmYWlsZWQnLFxuICBlcnJvcj86IFN0b3J5R2VuZXJhdGlvbkVycm9yXG4pID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB1c2VyID0gYXV0aC5jdXJyZW50VXNlcjtcbiAgICBpZiAoIXVzZXIpIHtcbiAgICAgIHRocm93IG5ldyBGaXJlYmFzZUVycm9yKCdVc2VyIG11c3QgYmUgYXV0aGVudGljYXRlZCB0byB1cGRhdGUgc3Rvcnkgc3RhdHVzJywgJ1VOQVVUSEVOVElDQVRFRCcsIDQwMSk7XG4gICAgfVxuXG4gICAgY29uc3Qgc3RvcnlSZWYgPSBkb2MoZGIsICdzdG9yaWVzJywgc3RvcnlJZCk7XG4gICAgY29uc3Qgc3RvcnlTbmFwID0gYXdhaXQgZ2V0RG9jKHN0b3J5UmVmKTtcblxuICAgIGlmICghc3RvcnlTbmFwLmV4aXN0cygpKSB7XG4gICAgICB0aHJvdyBuZXcgRmlyZWJhc2VFcnJvcignU3Rvcnkgbm90IGZvdW5kJywgJ05PVF9GT1VORCcsIDQwNCk7XG4gICAgfVxuXG4gICAgY29uc3Qgc3RvcnlEYXRhID0gc3RvcnlTbmFwLmRhdGEoKSBhcyBTdG9yeTtcbiAgICBpZiAoc3RvcnlEYXRhLnVzZXJJZCAhPT0gdXNlci51aWQpIHtcbiAgICAgIHRocm93IG5ldyBGaXJlYmFzZUVycm9yKCdVbmF1dGhvcml6ZWQgdG8gdXBkYXRlIHRoaXMgc3RvcnknLCAnVU5BVVRIT1JJWkVEJywgNDAzKTtcbiAgICB9XG5cbiAgICBjb25zdCB1cGRhdGVzOiBhbnkgPSB7XG4gICAgICBzdGF0dXMsXG4gICAgICB1cGRhdGVkQXQ6IHNlcnZlclRpbWVzdGFtcCgpLFxuICAgICAgbGFzdEF0dGVtcHRBdDogc2VydmVyVGltZXN0YW1wKClcbiAgICB9O1xuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICB1cGRhdGVzLmVycm9yID0ge1xuICAgICAgICAuLi5lcnJvcixcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgIH07XG4gICAgICB1cGRhdGVzLmdlbmVyYXRpb25BdHRlbXB0cyA9IChzdG9yeURhdGEuZ2VuZXJhdGlvbkF0dGVtcHRzIHx8IDApICsgMTtcbiAgICB9XG5cbiAgICBhd2FpdCB1cGRhdGVEb2Moc3RvcnlSZWYsIHVwZGF0ZXMpO1xuICAgIHJldHVybiBzdG9yeUlkO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEZpcmViYXNlRXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciB1cGRhdGluZyBzdG9yeSBzdGF0dXM6JywgZXJyb3IpO1xuICAgIHRocm93IG5ldyBGaXJlYmFzZUVycm9yKFxuICAgICAgJ0ZhaWxlZCB0byB1cGRhdGUgc3Rvcnkgc3RhdHVzJyxcbiAgICAgICdVUERBVEVfRVJST1InLFxuICAgICAgZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiAnY29kZScgaW4gZXJyb3IgPyA1MDAgOiA1MDBcbiAgICApO1xuICB9XG59O1xuXG4vLyBGdW5jdGlvbiB0byBnZXQgc3RvcnkgZ2VuZXJhdGlvbiBzdGF0dXNcbmV4cG9ydCBjb25zdCBnZXRTdG9yeUdlbmVyYXRpb25TdGF0dXMgPSBhc3luYyAoc3RvcnlJZDogc3RyaW5nKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgdXNlciA9IGF1dGguY3VycmVudFVzZXI7XG4gICAgaWYgKCF1c2VyKSB7XG4gICAgICB0aHJvdyBuZXcgRmlyZWJhc2VFcnJvcignVXNlciBtdXN0IGJlIGF1dGhlbnRpY2F0ZWQgdG8gZ2V0IHN0b3J5IHN0YXR1cycsICdVTkFVVEhFTlRJQ0FURUQnLCA0MDEpO1xuICAgIH1cblxuICAgIGNvbnN0IGRvY1JlZiA9IGRvYyhkYiwgJ3N0b3JpZXMnLCBzdG9yeUlkKTtcbiAgICBjb25zdCBkb2NTbmFwID0gYXdhaXQgZ2V0RG9jKGRvY1JlZik7XG5cbiAgICBpZiAoIWRvY1NuYXAuZXhpc3RzKCkpIHtcbiAgICAgIHRocm93IG5ldyBGaXJlYmFzZUVycm9yKCdTdG9yeSBub3QgZm91bmQnLCAnTk9UX0ZPVU5EJywgNDA0KTtcbiAgICB9XG5cbiAgICBjb25zdCBzdG9yeURhdGEgPSBkb2NTbmFwLmRhdGEoKSBhcyBTdG9yeTtcbiAgICBpZiAoc3RvcnlEYXRhLnVzZXJJZCAhPT0gdXNlci51aWQpIHtcbiAgICAgIHRocm93IG5ldyBGaXJlYmFzZUVycm9yKCdVbmF1dGhvcml6ZWQgdG8gYWNjZXNzIHRoaXMgc3RvcnknLCAnVU5BVVRIT1JJWkVEJywgNDAzKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgc3RhdHVzOiBzdG9yeURhdGEuc3RhdHVzLFxuICAgICAgZXJyb3I6IHN0b3J5RGF0YS5lcnJvcixcbiAgICAgIGdlbmVyYXRpb25BdHRlbXB0czogc3RvcnlEYXRhLmdlbmVyYXRpb25BdHRlbXB0cyB8fCAwLFxuICAgICAgbGFzdEF0dGVtcHRBdDogc3RvcnlEYXRhLmxhc3RBdHRlbXB0QXRcbiAgICB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEZpcmViYXNlRXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZXR0aW5nIHN0b3J5IHN0YXR1czonLCBlcnJvcik7XG4gICAgdGhyb3cgbmV3IEZpcmViYXNlRXJyb3IoXG4gICAgICAnRmFpbGVkIHRvIGdldCBzdG9yeSBzdGF0dXMnLFxuICAgICAgJ0ZFVENIX0VSUk9SJyxcbiAgICAgIGVycm9yIGluc3RhbmNlb2YgRXJyb3IgJiYgJ2NvZGUnIGluIGVycm9yID8gNTAwIDogNTAwXG4gICAgKTtcbiAgfVxufTtcblxuZXhwb3J0IHsgYXBwLCBhdXRoLCBkYiwgYW5hbHl0aWNzIH07ICJdLCJuYW1lcyI6WyJpbml0aWFsaXplQXBwIiwiZ2V0QXBwcyIsImdldEFwcCIsImdldEF1dGgiLCJnZXRGaXJlc3RvcmUiLCJjb2xsZWN0aW9uIiwiYWRkRG9jIiwic2VydmVyVGltZXN0YW1wIiwicXVlcnkiLCJ3aGVyZSIsIm9yZGVyQnkiLCJnZXREb2NzIiwiZG9jIiwiZ2V0RG9jIiwidXBkYXRlRG9jIiwiZ2V0QW5hbHl0aWNzIiwiY29uc29sZSIsImxvZyIsImFwaUtleSIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19GSVJFQkFTRV9BUElfS0VZIiwiYXV0aERvbWFpbiIsIk5FWFRfUFVCTElDX0ZJUkVCQVNFX0FVVEhfRE9NQUlOIiwicHJvamVjdElkIiwiTkVYVF9QVUJMSUNfRklSRUJBU0VfUFJPSkVDVF9JRCIsInN0b3JhZ2VCdWNrZXQiLCJORVhUX1BVQkxJQ19GSVJFQkFTRV9TVE9SQUdFX0JVQ0tFVCIsIm1lc3NhZ2luZ1NlbmRlcklkIiwiTkVYVF9QVUJMSUNfRklSRUJBU0VfTUVTU0FHSU5HX1NFTkRFUl9JRCIsImFwcElkIiwiTkVYVF9QVUJMSUNfRklSRUJBU0VfQVBQX0lEIiwibWVhc3VyZW1lbnRJZCIsIk5FWFRfUFVCTElDX0ZJUkVCQVNFX01FQVNVUkVNRU5UX0lEIiwiZmlyZWJhc2VDb25maWciLCJhcHAiLCJsZW5ndGgiLCJhdXRoIiwiZGIiLCJhbmFseXRpY3MiLCJlcnJvciIsInN0b3JpZXNDb2xsZWN0aW9uIiwiRmlyZWJhc2VFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJtZXNzYWdlIiwiY29kZSIsInN0YXR1cyIsIm5hbWUiLCJ2YWxpZGF0ZVN0b3J5Iiwic3RvcnkiLCJlcnJvcnMiLCJ0aXRsZSIsInRyaW0iLCJwdXNoIiwiY29udGVudCIsImNvbmZpZyIsImluZHVzdHJ5IiwiY29tcGFueVNpemUiLCJyb2xlIiwiZXhwZXJpZW5jZSIsImZvY3VzIiwidG9uZSIsImZvcm1hdCIsInVzZXJJZCIsImluY2x1ZGVzIiwiam9pbiIsInNhdmVTdG9yeSIsInVzZXIiLCJjdXJyZW50VXNlciIsImRvY1JlZiIsInVpZCIsImNyZWF0ZWRBdCIsImlkIiwidXBkYXRlU3RvcnkiLCJzdG9yeUlkIiwidXBkYXRlcyIsInN0b3J5UmVmIiwic3RvcnlTbmFwIiwiZXhpc3RzIiwic3RvcnlEYXRhIiwiZGF0YSIsInVwZGF0ZWRTdG9yeSIsInVwZGF0ZWRBdCIsImdldFVzZXJTdG9yaWVzIiwicSIsInF1ZXJ5U25hcHNob3QiLCJkb2NzIiwibWFwIiwiZ2V0U3RvcnkiLCJkb2NTbmFwIiwiY3JlYXRlU3RvcnlXaXRoU3RhdHVzIiwidGltZXN0YW1wIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwiZ2VuZXJhdGlvbkF0dGVtcHRzIiwibGFzdEF0dGVtcHRBdCIsInVwZGF0ZVN0b3J5U3RhdHVzIiwiZ2V0U3RvcnlHZW5lcmF0aW9uU3RhdHVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/firebase.ts\n"));

/***/ })

});