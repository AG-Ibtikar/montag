"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/sign-in/page",{

/***/ "(app-pages-browser)/./src/lib/firebase.ts":
/*!*****************************!*\
  !*** ./src/lib/firebase.ts ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FirebaseError: function() { return /* binding */ FirebaseError; },\n/* harmony export */   analytics: function() { return /* binding */ analytics; },\n/* harmony export */   app: function() { return /* binding */ app; },\n/* harmony export */   auth: function() { return /* binding */ auth; },\n/* harmony export */   createStoryWithStatus: function() { return /* binding */ createStoryWithStatus; },\n/* harmony export */   db: function() { return /* binding */ db; },\n/* harmony export */   getStory: function() { return /* binding */ getStory; },\n/* harmony export */   getStoryGenerationStatus: function() { return /* binding */ getStoryGenerationStatus; },\n/* harmony export */   getUserStories: function() { return /* binding */ getUserStories; },\n/* harmony export */   saveStory: function() { return /* binding */ saveStory; },\n/* harmony export */   storiesCollection: function() { return /* binding */ storiesCollection; },\n/* harmony export */   updateStory: function() { return /* binding */ updateStory; },\n/* harmony export */   updateStoryStatus: function() { return /* binding */ updateStoryStatus; }\n/* harmony export */ });\n/* harmony import */ var firebase_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/app */ \"(app-pages-browser)/./node_modules/firebase/app/dist/esm/index.esm.js\");\n/* harmony import */ var firebase_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase/auth */ \"(app-pages-browser)/./node_modules/firebase/auth/dist/esm/index.esm.js\");\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! firebase/firestore */ \"(app-pages-browser)/./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n/* harmony import */ var firebase_analytics__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! firebase/analytics */ \"(app-pages-browser)/./node_modules/firebase/analytics/dist/esm/index.esm.js\");\n/* __next_internal_client_entry_do_not_use__ storiesCollection,FirebaseError,saveStory,updateStory,getUserStories,getStory,createStoryWithStatus,updateStoryStatus,getStoryGenerationStatus,app,auth,db,analytics auto */ \n\n\n\n// Log environment variables for debugging\nconsole.log(\"Firebase Config:\", {\n    apiKey:  true ? \"Set\" : 0,\n    authDomain:  true ? \"Set\" : 0,\n    projectId:  true ? \"Set\" : 0,\n    storageBucket:  true ? \"Set\" : 0,\n    messagingSenderId:  true ? \"Set\" : 0,\n    appId:  true ? \"Set\" : 0,\n    measurementId:  true ? \"Set\" : 0\n});\nconst firebaseConfig = {\n    apiKey: \"AIzaSyAPjxc_Y70cfxyME-ao3WspK8PCeJaTR7k\",\n    authDomain: \"montajai.firebaseapp.com\",\n    projectId: \"montajai\",\n    storageBucket: \"montajai.firebasestorage.app\",\n    messagingSenderId: \"1074834137884\",\n    appId: \"1:1074834137884:web:acaa300a37b9dadc3e10d9\",\n    measurementId: \"G-HSZ6LZR8Q9\"\n};\n// Initialize Firebase\nconst app = (0,firebase_app__WEBPACK_IMPORTED_MODULE_0__.getApps)().length ? (0,firebase_app__WEBPACK_IMPORTED_MODULE_0__.getApp)() : (0,firebase_app__WEBPACK_IMPORTED_MODULE_0__.initializeApp)(firebaseConfig);\nconst auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)(app);\nconst db = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getFirestore)(app);\nlet analytics;\ntry {\n    // Initialize Analytics only in browser environment\n    if (true) {\n        analytics = (0,firebase_analytics__WEBPACK_IMPORTED_MODULE_3__.getAnalytics)(app);\n    }\n    console.log(\"Firebase initialized successfully\");\n} catch (error) {\n    console.error(\"Error initializing Firebase:\", error);\n    throw error;\n}\n// Add security rules for stories collection\nconst storiesCollection = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(db, \"stories\");\n// Custom error types for better error handling\nclass FirebaseError extends Error {\n    constructor(message, code, status = 500){\n        super(message);\n        this.code = code;\n        this.status = status;\n        this.name = \"FirebaseError\";\n    }\n}\n// Validation function for story data\nconst validateStory = (story)=>{\n    var _story_title, _story_content, _story_userId;\n    const errors = [];\n    if (!((_story_title = story.title) === null || _story_title === void 0 ? void 0 : _story_title.trim())) {\n        errors.push(\"Title is required\");\n    }\n    if (!((_story_content = story.content) === null || _story_content === void 0 ? void 0 : _story_content.trim())) {\n        errors.push(\"Content is required\");\n    }\n    if (!story.config) {\n        errors.push(\"Configuration is required\");\n    } else {\n        const { industry, companySize, role, experience, focus, tone, format, length } = story.config;\n        if (!(industry === null || industry === void 0 ? void 0 : industry.trim())) errors.push(\"Industry is required\");\n        if (!(companySize === null || companySize === void 0 ? void 0 : companySize.trim())) errors.push(\"Company size is required\");\n        if (!(role === null || role === void 0 ? void 0 : role.trim())) errors.push(\"Role is required\");\n        if (!(experience === null || experience === void 0 ? void 0 : experience.trim())) errors.push(\"Experience is required\");\n        if (!(focus === null || focus === void 0 ? void 0 : focus.trim())) errors.push(\"Focus is required\");\n        if (!(tone === null || tone === void 0 ? void 0 : tone.trim())) errors.push(\"Tone is required\");\n        if (!(format === null || format === void 0 ? void 0 : format.trim())) errors.push(\"Format is required\");\n        if (!(length === null || length === void 0 ? void 0 : length.trim())) errors.push(\"Length is required\");\n    }\n    if (!((_story_userId = story.userId) === null || _story_userId === void 0 ? void 0 : _story_userId.trim())) {\n        errors.push(\"User ID is required\");\n    }\n    if (!story.status || ![\n        \"completed\",\n        \"in_progress\",\n        \"failed\"\n    ].includes(story.status)) {\n        errors.push(\"Invalid status\");\n    }\n    if (errors.length > 0) {\n        throw new FirebaseError(errors.join(\", \"), \"INVALID_DATA\", 400);\n    }\n};\n// Function to save a story to Firestore\nconst saveStory = async (story)=>{\n    try {\n        const storyData = {\n            ...story,\n            createdAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.serverTimestamp)(),\n            status: \"completed\"\n        };\n        const docRef = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.addDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(db, \"stories\"), storyData);\n        return docRef.id;\n    } catch (error) {\n        console.error(\"Error saving story:\", error);\n        throw new Error(\"Failed to save story\");\n    }\n};\n// Function to update a story\nconst updateStory = async (storyId, updates)=>{\n    try {\n        const user = auth.currentUser;\n        if (!user) {\n            throw new FirebaseError(\"User must be authenticated to update stories\", \"UNAUTHENTICATED\", 401);\n        }\n        // Get the existing story to verify ownership\n        const storyRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.doc)(db, \"stories\", storyId);\n        const storySnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDoc)(storyRef);\n        if (!storySnap.exists()) {\n            throw new FirebaseError(\"Story not found\", \"NOT_FOUND\", 404);\n        }\n        const storyData = storySnap.data();\n        if (storyData.userId !== user.uid) {\n            throw new FirebaseError(\"Unauthorized to update this story\", \"UNAUTHORIZED\", 403);\n        }\n        // Validate the updated data\n        const updatedStory = {\n            ...storyData,\n            ...updates\n        };\n        validateStory(updatedStory);\n        // Update the story\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.updateDoc)(storyRef, {\n            ...updates,\n            updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.serverTimestamp)()\n        });\n        return storyId;\n    } catch (error) {\n        if (error instanceof FirebaseError) {\n            throw error;\n        }\n        console.error(\"Error updating story:\", error);\n        throw new FirebaseError(\"Failed to update story\", \"UPDATE_ERROR\", error instanceof Error && \"code\" in error ? 500 : 500);\n    }\n};\n// Function to get stories for the current user\nconst getUserStories = async ()=>{\n    try {\n        const user = auth.currentUser;\n        if (!user) {\n            throw new FirebaseError(\"User must be authenticated to fetch stories\", \"UNAUTHENTICATED\", 401);\n        }\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.query)(storiesCollection, (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.where)(\"userId\", \"==\", user.uid), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.orderBy)(\"createdAt\", \"desc\"));\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDocs)(q);\n        return querySnapshot.docs.map((doc)=>({\n                id: doc.id,\n                ...doc.data()\n            }));\n    } catch (error) {\n        if (error instanceof FirebaseError) {\n            throw error;\n        }\n        console.error(\"Error fetching stories:\", error);\n        throw new FirebaseError(\"Failed to fetch stories\", \"FETCH_ERROR\", error instanceof Error && \"code\" in error ? 500 : 500);\n    }\n};\n// Function to get a single story\nconst getStory = async (storyId)=>{\n    try {\n        const user = auth.currentUser;\n        if (!user) {\n            throw new FirebaseError(\"User must be authenticated to get stories\", \"UNAUTHENTICATED\", 401);\n        }\n        const storyDoc = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.doc)(db, \"stories\", storyId));\n        if (!storyDoc.exists()) {\n            throw new FirebaseError(\"Story not found\", \"NOT_FOUND\", 404);\n        }\n        const storyData = storyDoc.data();\n        if (storyData.userId !== user.uid) {\n            throw new FirebaseError(\"Unauthorized to access this story\", \"UNAUTHORIZED\", 403);\n        }\n        return {\n            id: storyDoc.id,\n            ...storyData\n        };\n    } catch (error) {\n        if (error instanceof FirebaseError) {\n            throw error;\n        }\n        console.error(\"Error getting story:\", error);\n        throw new FirebaseError(\"Failed to get story\", \"FETCH_ERROR\", error instanceof Error && \"code\" in error ? 500 : 500);\n    }\n};\n// Function to create a story with initial status and error tracking\nconst createStoryWithStatus = async function(story) {\n    let status = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"in_progress\", error = arguments.length > 2 ? arguments[2] : void 0;\n    try {\n        const user = auth.currentUser;\n        if (!user) {\n            throw new FirebaseError(\"User must be authenticated to create stories\", \"UNAUTHENTICATED\", 401);\n        }\n        // Create initial story document with error tracking\n        const docRef = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.addDoc)(storiesCollection, {\n            ...story,\n            userId: user.uid,\n            status,\n            createdAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.serverTimestamp)(),\n            error: error ? {\n                ...error,\n                timestamp: new Date().toISOString()\n            } : null,\n            generationAttempts: 0,\n            lastAttemptAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.serverTimestamp)()\n        });\n        return docRef.id;\n    } catch (error) {\n        if (error instanceof FirebaseError) {\n            throw error;\n        }\n        console.error(\"Error creating story:\", error);\n        throw new FirebaseError(\"Failed to create story\", \"CREATE_ERROR\", error instanceof Error && \"code\" in error ? 500 : 500);\n    }\n};\n// Function to update story generation status with detailed error tracking\nconst updateStoryStatus = async (storyId, status, error)=>{\n    try {\n        const user = auth.currentUser;\n        if (!user) {\n            throw new FirebaseError(\"User must be authenticated to update story status\", \"UNAUTHENTICATED\", 401);\n        }\n        const storyRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.doc)(db, \"stories\", storyId);\n        const storySnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDoc)(storyRef);\n        if (!storySnap.exists()) {\n            throw new FirebaseError(\"Story not found\", \"NOT_FOUND\", 404);\n        }\n        const storyData = storySnap.data();\n        if (storyData.userId !== user.uid) {\n            throw new FirebaseError(\"Unauthorized to update this story\", \"UNAUTHORIZED\", 403);\n        }\n        const updates = {\n            status,\n            updatedAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.serverTimestamp)(),\n            lastAttemptAt: (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.serverTimestamp)()\n        };\n        if (error) {\n            updates.error = {\n                ...error,\n                timestamp: new Date().toISOString()\n            };\n            updates.generationAttempts = (storyData.generationAttempts || 0) + 1;\n        }\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.updateDoc)(storyRef, updates);\n        return storyId;\n    } catch (error) {\n        if (error instanceof FirebaseError) {\n            throw error;\n        }\n        console.error(\"Error updating story status:\", error);\n        throw new FirebaseError(\"Failed to update story status\", \"UPDATE_ERROR\", error instanceof Error && \"code\" in error ? 500 : 500);\n    }\n};\n// Function to get story generation status\nconst getStoryGenerationStatus = async (storyId)=>{\n    try {\n        const user = auth.currentUser;\n        if (!user) {\n            throw new FirebaseError(\"User must be authenticated to get story status\", \"UNAUTHENTICATED\", 401);\n        }\n        const docRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.doc)(db, \"stories\", storyId);\n        const docSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDoc)(docRef);\n        if (!docSnap.exists()) {\n            throw new FirebaseError(\"Story not found\", \"NOT_FOUND\", 404);\n        }\n        const storyData = docSnap.data();\n        if (storyData.userId !== user.uid) {\n            throw new FirebaseError(\"Unauthorized to access this story\", \"UNAUTHORIZED\", 403);\n        }\n        return {\n            status: storyData.status,\n            error: storyData.error,\n            generationAttempts: storyData.generationAttempts || 0,\n            lastAttemptAt: storyData.lastAttemptAt\n        };\n    } catch (error) {\n        if (error instanceof FirebaseError) {\n            throw error;\n        }\n        console.error(\"Error getting story status:\", error);\n        throw new FirebaseError(\"Failed to get story status\", \"FETCH_ERROR\", error instanceof Error && \"code\" in error ? 500 : 500);\n    }\n};\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/firebase.ts\n"));

/***/ })

});